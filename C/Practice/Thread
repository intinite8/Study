#include <stdio.h>

#include <stdlib.h>

#include <pthread.h>

#define NUM_THREADS 2

int sharedVariable = 0;

pthread_mutex_t mutex;

void* increment(void* arg) {

    int threadID = *(int*)arg;

    for (int i = 0; i < 100000; i++) {

        pthread_mutex_lock(&mutex);

        sharedVariable++;

        pthread_mutex_unlock(&mutex);

    }

    printf("Thread %d: Increment complete\n", threadID);

    pthread_exit(NULL);

}

void* decrement(void* arg) {

    int threadID = *(int*)arg;

    for (int i = 0; i < 100000; i++) {

        pthread_mutex_lock(&mutex);

        sharedVariable--;

        pthread_mutex_unlock(&mutex);

    }

    printf("Thread %d: Decrement complete\n", threadID);

    pthread_exit(NULL);

}

int main() {

    pthread_t threads[NUM_THREADS];

    int threadIDs[NUM_THREADS] = {0, 1};

    pthread_mutex_init(&mutex, NULL);

    for (int i = 0; i < NUM_THREADS; i++) {

        if (i % 2 == 0) {

            pthread_create(&threads[i], NULL, increment, (void*)&threadIDs[i]);

        } else {

            pthread_create(&threads[i], NULL, decrement, (void*)&threadIDs[i]);

        }

    }

    for (int i = 0; i < NUM_THREADS; i++) {

        pthread_join(threads[i], NULL);

    }

    printf("Shared Variable: %d\n", sharedVariable);

    pthread_mutex_destroy(&mutex);

    return 0;

}

