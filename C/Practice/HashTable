#include <stdio.h>
#include <stdlib.h>

#define SIZE 10

typedef struct Node {
    int key;
    int value;
    struct Node* next;
} Node;

typedef struct {
    Node* array[SIZE];
} HashTable;

int hashFunction(int key) {
    return key % SIZE;
}

void insert(HashTable* hashTable, int key, int value) {
    int index = hashFunction(key);
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->key = key;
    newNode->value = value;
    newNode->next = NULL;

    if (hashTable->array[index] == NULL) {
        hashTable->array[index] = newNode;
    } else {
        Node* current = hashTable->array[index];
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

int search(HashTable* hashTable, int key) {
    int index = hashFunction(key);
    Node* current = hashTable->array[index];

    while (current != NULL) {
        if (current->key == key) {
            return current->value;
        }
        current = current->next;
    }

    return -1;  // 키를 찾지 못한 경우
}

void delete(HashTable* hashTable, int key) {
    int index = hashFunction(key);
    Node* current = hashTable->array[index];
    Node* prev = NULL;

    while (current != NULL) {
        if (current->key == key) {
            if (prev == NULL) {
                hashTable->array[index] = current->next;
            } else {
                prev->next = current->next;
            }
            free(current);
            return;
        }
        prev = current;
        current = current->next;
    }
}

void printHashTable(HashTable* hashTable) {
    for (int i = 0; i < SIZE; i++) {
        Node* current = hashTable->array[i];
        printf("Bucket %d: ", i);
        while (current != NULL) {
            printf("(%d, %d) ", current->key, current->value);
            current = current->next;
        }
        printf("\n");
    }
}

int main() {
    HashTable hashTable;

    // 초기화
    for (int i = 0; i < SIZE; i++) {
        hashTable.array[i] = NULL;
    }

    // 데이터 삽입
    insert(&hashTable, 3, 30);
    insert(&hashTable, 12, 120);
    insert(&hashTable, 8, 80);
    insert(&hashTable, 17, 170);

    // 데이터 탐색
    int value = search(&hashTable, 12);
    if (value != -1) {
        printf("Key 12 found, value: %d\n", value);
    } else {
        printf("Key 12 not found\n");
    }

    // 데이터 삭제
    delete(&hashTable, 8);

    // 해시 테이블 출력
    printHashTable(&hashTable);

    return 0;
}
