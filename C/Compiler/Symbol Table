#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// 심벌 정보 구조체
typedef struct {
    char name[100];
    int value;
} Symbol;

// 심벌 테이블 구조체
typedef struct {
    Symbol* symbols;
    int capacity;
    int size;
} SymbolTable;

// 심벌 테이블 초기화 함수
void initializeSymbolTable(SymbolTable* symbolTable, int capacity) {
    symbolTable->symbols = (Symbol*)malloc(capacity * sizeof(Symbol));
    symbolTable->capacity = capacity;
    symbolTable->size = 0;
}

// 심벌 추가 함수
void addSymbol(SymbolTable* symbolTable, const char* name, int value) {
    if (symbolTable->size >= symbolTable->capacity) {
        // 심벌 테이블이 꽉 찼을 경우 용량을 늘려줍니다.
        symbolTable->capacity *= 2;
        symbolTable->symbols = (Symbol*)realloc(symbolTable->symbols, symbolTable->capacity * sizeof(Symbol));
    }

    Symbol symbol;
    strcpy(symbol.name, name);
    symbol.value = value;

    symbolTable->symbols[symbolTable->size++] = symbol;
}

// 심벌 검색 함수
int findSymbol(SymbolTable* symbolTable, const char* name) {
    for (int i = 0; i < symbolTable->size; i++) {
        if (strcmp(symbolTable->symbols[i].name, name) == 0) {
            return symbolTable->symbols[i].value;
        }
    }

    return -1;  // 심벌을 찾지 못한 경우 -1을 반환합니다.
}

// 메인 함수
int main() {
    SymbolTable symbolTable;
    initializeSymbolTable(&symbolTable, 10);

    addSymbol(&symbolTable, "x", 10);
    addSymbol(&symbolTable, "y", 20);
    addSymbol(&symbolTable, "z", 30);

    int value = findSymbol(&symbolTable, "y");
    if (value != -1) {
        printf("Symbol value: %d\n", value);
    } else {
        printf("Symbol not found.\n");
    }

    return 0;
}
