#include <stdio.h>
#include <stdbool.h>

#define MAX_VERTICES 100

typedef struct {
    int v;  // 정점의 개수
    int adj_matrix[MAX_VERTICES][MAX_VERTICES];  // 인접 행렬
} Graph;

// 그래프 초기화 함수
void initGraph(Graph* graph, int v) {
    graph->v = v;
    
    // 인접 행렬 초기화
    for (int i = 0; i < v; i++) {
        for (int j = 0; j < v; j++) {
            graph->adj_matrix[i][j] = 0;
        }
    }
}

// 간선 추가 함수
void addEdge(Graph* graph, int start, int end) {
    graph->adj_matrix[start][end] = 1;
    graph->adj_matrix[end][start] = 1;
}

// 너비 우선 탐색 함수
void BFS(Graph* graph, int start) {
    bool visited[MAX_VERTICES] = { false };  // 방문 여부를 저장하는 배열
    int queue[MAX_VERTICES];
    int front = 0;
    int rear = 0;
    
    visited[start] = true;  // 시작 정점 방문 표시
    queue[rear++] = start;  // 시작 정점을 큐에 삽입
    
    printf("BFS 탐색 결과: ");
    
    while (front < rear) {
        int current = queue[front++];  // 큐에서 정점을 하나 꺼냄
        printf("%d ", current);
        
        for (int i = 0; i < graph->v; i++) {
            // 현재 정점과 연결되어 있고 방문하지 않은 정점을 큐에 삽입
            if (graph->adj_matrix[current][i] == 1 && !visited[i]) {
                visited[i] = true;
                queue[rear++] = i;
            }
        }
    }
    
    printf("\n");
}

int main() {
    Graph graph;
    int vertices = 6;  // 정점의 개수
    
    initGraph(&graph, vertices);
    
    addEdge(&graph, 0, 1);
    addEdge(&graph, 0, 2);
    addEdge(&graph, 1, 3);
    addEdge(&graph, 1, 4);
    addEdge(&graph, 2, 4);
    addEdge(&graph, 3, 5);
    
    int startVertex = 0;  // 시작 정점
    
    BFS(&graph, startVertex);
    
    return 0;
}
