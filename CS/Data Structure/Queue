#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

// 큐를 나타내는 구조체
typedef struct Queue {
    int arr[MAX_SIZE];  // 요소들을 저장하는 배열
    int front;          // 큐의 맨 앞을 가리키는 인덱스
    int rear;           // 큐의 맨 뒤를 가리키는 인덱스
} Queue;

// 큐 초기화 함수
void initQueue(Queue* queue) {
    queue->front = -1;
    queue->rear = -1;
}

// 큐가 비어있는지 확인하는 함수
int isEmpty(Queue* queue) {
    return (queue->front == -1);
}

// 큐가 가득 찼는지 확인하는 함수
int isFull(Queue* queue) {
    return ((queue->rear + 1) % MAX_SIZE == queue->front);
}

// 큐에 요소를 추가하는 함수
void enqueue(Queue* queue, int data) {
    if (isFull(queue)) {
        printf("Queue is full.\n");
        return;
    }

    if (isEmpty(queue)) {
        queue->front = 0;
        queue->rear = 0;
    } else {
        queue->rear = (queue->rear + 1) % MAX_SIZE;
    }

    queue->arr[queue->rear] = data;
}

// 큐에서 요소를 제거하고 반환하는 함수
int dequeue(Queue* queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty.\n");
        return -1;
    }

    int data = queue->arr[queue->front];

    if (queue->front == queue->rear) {
        queue->front = -1;
        queue->rear = -1;
    } else {
        queue->front = (queue->front + 1) % MAX_SIZE;
    }

    return data;
}

// 큐의 요소들을 출력하는 함수
void displayQueue(Queue* queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty.\n");
        return;
    }

    int i = queue->front;
    while (i != queue->rear) {
        printf("%d ", queue->arr[i]);
        i = (i + 1) % MAX_SIZE;
    }
    printf("%d\n", queue->arr[i]);
}

int main() {
    Queue queue;
    initQueue(&queue);

    enqueue(&queue, 1);
    enqueue(&queue, 2);
    enqueue(&queue, 3);
    enqueue(&queue, 4);

    displayQueue(&queue);

    int removedElement = dequeue(&queue);
    printf("Removed element: %d\n", removedElement);

    displayQueue(&queue);

    return 0;
}
